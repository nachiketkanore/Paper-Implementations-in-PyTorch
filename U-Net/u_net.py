# -*- coding: utf-8 -*-
"""U-Net.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-BGmBhK2SciO8AWGuSC0oAw0RSt9ZzYM
"""

import torch
import torch.nn as nn

def double_conv(in_channels, out_channels):
    conv = nn.Sequential(
        nn.Conv2d(in_channels, out_channels, kernel_size = 3),
        nn.ReLU(inplace = True),
        nn.Conv2d(out_channels, out_channels, kernel_size = 3),
        nn.ReLU(inplace = True)
    )
    return conv

def crop_image(original, target):
    target_size = target.size()[2]
    original_size = original.size()[2]
    delta = original_size - target_size
    assert(delta >= 0)
    delta = delta // 2
    return original[:, :, delta: original_size-delta, delta:original_size-delta]

class UNet(nn.Module):

    def __init__(self):
        super(UNet, self).__init__()

        self.max_pool_2x2 = nn.MaxPool2d(kernel_size = 2, stride = 2)
        self.down_conv1 = double_conv(1, 64)
        self.down_conv2 = double_conv(64, 128)
        self.down_conv3 = double_conv(128, 256)
        self.down_conv4 = double_conv(256, 512)
        self.down_conv5 = double_conv(512, 1024)

        self.trans_conv1 = nn.ConvTranspose2d(
                in_channels = 1024,
                out_channels = 512,
                kernel_size = 2,
                stride = 2
            )
    
        self.up_conv1 = double_conv(1024, 512)

        self.trans_conv2 = nn.ConvTranspose2d(
                in_channels = 512,
                out_channels = 256,
                kernel_size = 2,
                stride = 2
            )
    
        self.up_conv2 = double_conv(512, 256)

        self.trans_conv3 = nn.ConvTranspose2d(
                in_channels = 256,
                out_channels = 128,
                kernel_size = 2,
                stride = 2
            )
    
        self.up_conv3 = double_conv(256, 128)

        self.trans_conv4 = nn.ConvTranspose2d(
                in_channels = 128,
                out_channels = 64,
                kernel_size = 2,
                stride = 2
            )
    
        self.up_conv4 = double_conv(128, 64)

        self.out = nn.Conv2d(
            in_channels = 64,
            out_channels = 2,    # increase according to number of classes
            kernel_size = 1
        )

    def forward(self, image):
        # image = [batch_size, channels, h, w]
        # Encoder part
        x1 = self.down_conv1(image) # use for concat
        x2 = self.max_pool_2x2(x1)

        x3 = self.down_conv2(x2) # use for concat
        x4 = self.max_pool_2x2(x3)

        x5 = self.down_conv3(x4) # use for concat
        x6 = self.max_pool_2x2(x5)

        x7 = self.down_conv4(x6) # use for concat
        x8 = self.max_pool_2x2(x7)
        
        x9 = self.down_conv5(x8)

        # image size after first part
        print(f'Image after first part : {x9.shape}')

        # Decoder part
        x = self.trans_conv1(x9)
        y = crop_image(x7, x)
        x = self.up_conv1(torch.cat([x, y], 1))

        x = self.trans_conv2(x)
        y = crop_image(x5, x)
        x = self.up_conv2(torch.cat([x, y], 1))

        x = self.trans_conv3(x)
        y = crop_image(x3, x)
        x = self.up_conv3(torch.cat([x, y], 1))

        x = self.trans_conv4(x)
        y = crop_image(x1, x)
        x = self.up_conv4(torch.cat([x, y], 1))

        x = self.out(x)
        print(x.size())
        return x

sample = torch.randn(1, 1, 572, 572)
print(sample.shape)
model = UNet()
print(model(sample)) # expected size according to paper = [1, 2, 388, 388]

